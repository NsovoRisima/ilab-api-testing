package starter.trades;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ResponseBodyExtractionOptions;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import model.Pet;
import net.serenitybdd.junit.runners.SerenityRunner;
import net.serenitybdd.rest.SerenityRest;
import net.thucydides.core.annotations.Manual;
import net.thucydides.core.annotations.Pending;
import net.thucydides.core.annotations.Title;
import org.json.simple.JSONObject;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;

@RunWith(SerenityRunner.class)
public class IlabAssessment {
    private String name = "auto-" + Integer.toString(new Random(1000).nextInt());
    private long id = new Random(1000).nextInt();

    @Before
    public void init() throws URISyntaxException {

        RestAssured.baseURI = "https://dog.ceo/api/breeds/";
        //RestAssured.baseURI = "http://localhost:8080/api/";
    }

    @Test
    public void verifyThatASuccessfulMessageIsReturnedWhenAUserSearchesForRandomBreeds() {

        ValidatableResponse statusCode = SerenityRest.given()
                .when()
                .get("image/random")
                .then()
                .statusCode(200);
        //assertThat(statusCode.equals(200));

    }

    @Test
    public void verifyThatBulldogIsOnTheListOfAllBreeds() {

        HashMap<String, Object> breed = SerenityRest.given()
                .when()
                .get("/list/all")
                .then()
                .log()
                .all()
                .statusCode(200)
                .extract()
                .body()
                .path("message");

        assert breed.containsKey("bulldog") :
                new AssertionError("Bulldog breed not found");
    }

    @Test
    public void retrieveAllSubBreedsForBulldogsAndTheirRespectiveImages() {

        List<String> breed = SerenityRest.given()
                .when()
                .get("/list/all")
                .then()
                .log()
                .all()
                .statusCode(200)
                .extract()
                //.body()
                .path("message.bulldog");
    }

    @Test
    public void retrieveAllAvailablePetsAndConfirmName() {
        RestAssured.baseURI = "https://petstore.swagger.io/v2/pet/";
        List<Map<String, Object>> pests = SerenityRest.given()
                .headers("Content-Type", ContentType.JSON, "Accept", ContentType.JSON)
                .contentType(ContentType.JSON)
                .queryParam("status", "available")
                .get("/findByStatus")
                .then()
                .extract()
                .response().jsonPath().peek().getList("$");

        pests.forEach(x -> {
            String name = (String) x.get("name");
            HashMap<String, String> category = (HashMap<String, String>) x.get("category");

            if (name.equals("doggie")) {

                if (category != null && category.containsValue(10)) {
                    assert name.equals("doggie") : new AssertionError(" name not found");
                    assert category.containsValue(10) : new AssertionError("Value not found");
                }
            }
        });
    }

    @Test
    public void addANewPetWithAnAutoGeneratedNameAndStatusAvailableConfirm() {


        Pet pet = new Pet();
        System.out.println(name);
        pet.setName(name);
        pet.setStatus("Available");
        pet.setId(id);
        RestAssured.baseURI = "https://petstore.swagger.io/v2/pet";
        SerenityRest.given()
                .contentType(ContentType.JSON)
                .log()
                .all()
                .when()
                .body(pet)
                .post()
                .then()
//                .log()
//                .all()
                .assertThat()
                .statusCode(200);

    }

    public void retrieveTheCreatedPetUsingTheID() {
        RestAssured.baseURI = "https://petstore.swagger.io/v2/pet/";
        Pet breed = (Pet) SerenityRest.given()
                .when()
                .get(Long.toString(id))
                .then()
                .log()
                .all()
                .statusCode(200)
                .extract()
                .body();

        System.out.println(breed + " 888888 ");
    }
}
